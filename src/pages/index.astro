---
import i18next from "../i18n";
import { supabase } from "../lib/supabaseClient";
import type { Property } from "../types/property";

// שליפת ערים וכלל הנתונים
let availableCities: string[] = [];
let availableBedrooms: number[] = [2, 3, 4, 5];
let availableAmenities: string[] = ["washingmachine", "WiFi", "parking", "tv"];

const { data: citiesData, error: citiesError } = await supabase
  .from("properties")
  .select("city");

if (!citiesError && citiesData) {
  availableCities = [...new Set(citiesData.map((item: any) => item["city"]))];
}

let properties: Property[] = []; // הגדרת טיפוס למשתנה
const url = new URL(Astro.request.url);
const selectedRooms = url.searchParams.get("rooms");
const selectedAmenities = url.searchParams.getAll("amenities");
const selectedLocation = url.searchParams.get("location");

let query = supabase
  .from("properties")
  .select("*")
  .eq("is_active", true)
  .order("created_at", { ascending: false });

const { data, error } = await query;

if (!error && data) {
  properties = data as Property[]; // המרת הנתונים לטיפוס Property[]
} else {
  console.error(i18next.t("common.errors.errorFetchingProperties"), error?.message);
}

// מערך של כל התנאים לסינון
const filters = [
  {
    condition: selectedRooms,
    filter: (p: Property) => {
      if (selectedRooms === "5+") {
        return (p.bedrooms ?? 0) >= 5;
      } else {
        return (p.bedrooms ?? 0) === Number(selectedRooms);
      }
    },
  },

  {
    condition: selectedLocation,
    filter: (p: Property) => p.city === selectedLocation,
  },

  {
    condition: selectedAmenities.length > 0,
    filter: (p: Property) => {
      return selectedAmenities.every((amenity) => {
        if (amenity === "washingmachine" && !p.washingmachine) return false;
        if (amenity === "WiFi" && !p.wifi) return false;
        if (amenity === "parking" && !p.parking) return false;
        if (amenity === "tv" && !p.tv) return false;
        return true;
      });
    },
  },
];

// סינון הדירות לפי כל התנאים
filters.forEach(({ condition, filter }) => {
  if (condition) {
    properties = properties.filter(filter);
  }
});
---

<html lang="he">
  <head>
    <meta charset="UTF-8" />
    <title>{i18next.t("property.title")}</title>
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body dir="rtl">
    <!-- Header -->
    <header>
      <div class="logo">
        <img src="/images/logo.png" alt={i18next.t("property.title")} />
        <span>{i18next.t("property.title")}</span>
      </div>
      <nav>
        <!-- כפתורים לסוגי נכסים -->
        <a href="/" class="filter-btn">{i18next.t("search.apartments")}</a>
        <a href="/?type=בית" class="filter-btn">{i18next.t("search.houses")}</a>
        <a href="/?type=צימר" class="filter-btn">{i18next.t("search.cabins")}</a
        >
        <a href="/?type=וילה" class="filter-btn">{i18next.t("search.villas")}</a
        >
        <a href="/?type=מלון" class="filter-btn">{i18next.t("search.hotels")}</a
        >
        <a href="/?type=אטרקציה" class="filter-btn"
          >{i18next.t("search.attractions")}</a
        >
        <a href="/?type=קמפינג" class="filter-btn"
          >{i18next.t("search.camping")}</a
        >
      </nav>
      <a href="/admin/login" class="admin-btn">{i18next.t("admin.login")}</a>
    </header>

    <!-- Hero Section -->
    <section class="hero">
      <div class="overlay">
        <h1>{i18next.t("search.title")}</h1>
        <p>{i18next.t("search.description")}</p>

        <!-- Search Form -->
        <form class="filters" action="/" method="get">
          <!-- Filter for Location -->
          <div class="filter-group">
            <label for="location">{i18next.t("search.location")}</label>
            <select name="location" id="location">
              <option value="">{i18next.t("search.location")}</option>
              {
                availableCities.map((city) => (
                  <option value={city}>{city}</option>
                ))
              }
            </select>
          </div>

          <!-- Filter for Rooms -->
          <div class="filter-group">
            <label for="rooms">{i18next.t("search.rooms")}</label>
            <select name="rooms" id="rooms">
              <option value="">{i18next.t("search.rooms")}</option>
              {
                availableBedrooms.map((room) => (
                  <option value={room}>{room}</option>
                ))
              }
              <option value="5+">5+</option>
            </select>
          </div>

          <!-- Filter for Occupancy -->
          <div class="filter-group">
            <label for="occupancy">{i18next.t("search.occupancy")}</label>
            <select name="occupancy" id="occupancy">
              <option value="">{i18next.t("search.occupancy")}</option>
              {
                Array.from({ length: 10 }, (_, i) => i + 1).map((occupancy) => (
                  <option value={occupancy}>{occupancy}</option>
                ))
              }
            </select>
          </div>

          <!-- Filter for Price Range -->
          <div class="filter-group">
            <label for="priceRange">{i18next.t("search.price")}</label>
            <input
              type="range"
              name="price"
              id="priceRange"
              min="0"
              max="40000"
              step="10"
            />
            <div id="price-range-value">0 - 40000 ₪</div>
          </div>
          <!-- Filter for Amenities -->
          <div class="filter-group">
            <label>{i18next.t("search.amenities")}</label>
            <div class="amenities-checkboxes">
              <label>
                <input type="checkbox" name="amenities" value="wifi" /> WiFi
              </label>
              <label>
                <input
                  type="checkbox"
                  name="amenities"
                  value="washingmachine"
                /> מכונת כביסה
              </label>
              <label>
                <input type="checkbox" name="amenities" value="parking" /> חניה
              </label>
              <label>
                <input type="checkbox" name="amenities" value="tv" /> טלוויזיה
              </label>
            </div>
          </div>

          <button type="submit" class="search-btn"
            >{i18next.t("search.searchButton")}</button
          >
        </form>
      </div>
    </section>

    <!-- Property Listings -->
    <main>
      <ul class="home-property-list">
        {
          properties.map((p: Property) => (
            <li class="home-property-item" data-property={JSON.stringify(p)}>
              <a href={`/${p.id}`} class="home-property-link">
                <div class="home-property-images">
                  <img
                    id={`main-image-${p.id}`}
                    loading="lazy"
                    src={p.images[0]}
                    alt={p.title}
                    class="property-main-image"
                  />
                </div>

                <div class="property-details">
                  <h2 class="home-property-title">{p.title}</h2>
                  <p class="home-property-price">
                    {i18next.t("property.price")}:{" "}
                    {p.price.toLocaleString("he-IL")}
                  </p>

                  <div class="home-property-info">
                    <p class="home-property-location">
                      {p.location?.city || ""} {p.location?.street || ""}{" "}
                      {p.location?.number || ""}
                      {p.location?.floor ? `, קומה ${p.location.floor}` : ""}
                    </p>

                    <p class="home-property-features">
                      {[
                        { label: "חדרים", value: p.bedrooms },
                        { label: "מיטות", value: p.beds },
                        { label: "חדרי אמבטיה", value: p.bathrooms },
                        { label: "נפשות מקסימום", value: p.occupancy },
                      ].map((feature, i) => (
                        <span class="property-feature">
                          {feature.label}: {feature.value} {i < 8 ? "| " : ""}
                        </span>
                      ))}
                    </p>
                  </div>

                  <hr class="property-divider" />

                  <div class="home-property-contact">
                    <p class="home-property-whatsapp">
                      {p.whatsapp ? `📞 ${p.whatsapp}` : "אין פרטי קשר"}
                    </p>
                  </div>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
    </main>

    <script type="module">
      // שליפה של selectedAmenities מה-URL
      const selectedAmenities = new URLSearchParams(
        window.location.search,
      ).getAll("amenities");
      const selectedRooms = new URLSearchParams(window.location.search).get(
        "rooms",
      );
      const selectedLocation = new URLSearchParams(window.location.search).get(
        "location",
      );
      const selectedPriceRange = new URLSearchParams(
        window.location.search,
      ).get("price");
      const selectedType = new URLSearchParams(window.location.search).get(
        "type",
      );

      const propertyItems = document.querySelectorAll(".home-property-item");

      // קבלת אלמנט הסרגל והאלמנט של הצגת המחיר
      const priceRange = document.getElementById("priceRange");
      const priceValueDisplay = document.getElementById("price-range-value");

      // פונקציה לעדכון טווח המחיר
      priceRange.addEventListener("input", function () {
        const minPrice = priceRange.min;
        const maxPrice = priceRange.max;
        const value = priceRange.value;

        // עדכון טקסט הצגת המחיר
        priceValueDisplay.textContent = `${minPrice} - ${value} ₪`;

        // שמירת המחיר ב-localStorage
        sessionStorage.setItem("selectedPrice", value);
      });

      // אתחול המחיר מהמקומי סטרוג' אם קיים
      const savedPrice = localStorage.getItem("selectedPrice");
      if (savedPrice) {
        priceRange.value = savedPrice;
        priceValueDisplay.textContent = `0 - ${savedPrice} ₪`; // עדכון הצגת המחיר
      }

      // הפעלת סינון לפי תנאים
      propertyItems.forEach((item) => {
        if (item instanceof HTMLElement) {
          const p = JSON.parse(item.dataset.property);
          let isMatch = true;

          // מערך של כל התנאים לסינון
          const filters = [
            {
              condition: selectedType && p.type !== selectedType,
              field: "type",
            },
            {
              condition:
                selectedRooms &&
                selectedRooms !== "5+" &&
                p.bedrooms !== Number(selectedRooms),
              field: "rooms",
            },
            {
              condition: selectedLocation && p.city !== selectedLocation,
              field: "location",
            },
            {
              condition:
                selectedPriceRange && p.price > Number(selectedPriceRange),
              field: "price",
            },
            ...selectedAmenities.map((amenity) => ({
              condition:
                (amenity === "wifi" && !p.wifi) ||
                (amenity === "washingmachine" && !p.washingmachine) ||
                (amenity === "parking" && !p.parking) ||
                (amenity === "tv" && !p.tv),
              field: `amenity: ${amenity}`,
            })),
          ];

          // לולאת סינון אחת
          filters.forEach((filter) => {
            if (filter.condition) {
              isMatch = false;
            }
          });

          if (!isMatch) {
            item.style.display = "none";
          }
        }
      });
    </script>
  </body>
</html>