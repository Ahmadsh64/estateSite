---
import { supabase } from "../../lib/supabaseClient";
import type { Property } from "../../types/property";
import i18next from "../../i18n";

// בדיקת הרשאות תתבצע בצד הלקוח

let properties: Property[] = [];

// --- שליפת דירות מ-Supabase ---
const { data, error } = await supabase
  .from("properties")
  .select("*")
  .order("created_at", { ascending: false });

if (error) {
  console.error("שגיאה בשליפת הדירות:", error.message);
  const errorMessage = document.createElement("div");
        errorMessage.textContent = "שגיאה בטעינת הנכסים";
  errorMessage.style.color = "red";
  document.body.appendChild(errorMessage);
} else if (data) {
  properties = data.map((p: any) => ({
    id: p.id,
    title: p.title,
    price: p.price,
    location: {
      city: p.city || "",
      street: p.street || "",
      number: p.number || "",
      floor: p.floor || "",
    },
    images: p.images || [], // אם אין תמונה, תציג תמונה ברירת מחדל
    occupancy: p.occupancy,
    bedrooms: p.bedrooms,
    beds: p.beds,
    bathrooms: p.bathrooms,
    kitchen: p.kitchen,
    washingMachine: p.washingMachine,
    wifi: p.wifi,
    tv: p.tv,
    publicTransportNearby: p.publicTransportNearby,
    parking: p.parking,
    checkInTime: p.checkInTime,
    checkOutTime: p.checkOutTime,
    minStayDays: p.minStayDays,
    type: p.type,
    description: p.description,
    is_active: p.is_active ?? true,
    created_at: p.created_at,
  }));
}
---

<html lang="he">
  <head>
    <meta charset="UTF-8" />
    <title>{i18next.t("admin.propertyManagement")}</title>
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body dir="rtl">
    <header class="admin-header">
      <h1 class="admin-title">{i18next.t("admin.propertyManagement")}</h1>
      <nav class="admin-nav">
        <a href="/admin/add" class="admin-add-btn">➕ {i18next.t("admin.addNewProperty")}</a>
        <a href="/" class="admin-home-btn">🏠 {i18next.t("admin.backToHome")}</a>
        <button id="logout-btn" class="admin-logout-btn">🚪 {i18next.t("admin.logout")}</button>
      </nav>
    </header>

    <main class="admin-main">
      <div id="loading-spinner" style="display:none;">{i18next.t("admin.loading")}</div>

      {properties.map((p: Property) => (
        <div
          class="admin-property-card"
          data-id={p.id}
          style={`opacity: ${p.is_active ? "1" : "0.5"}`}
        >
          <img
            src={p.images[0]}
            alt={p.title}
            class="admin-property-img"
            loading="lazy"
          />
          <div class="admin-property-info">
            <div>
              <h2 class="admin-property-title">{p.title}</h2>
              <p class="admin-property-price">
                {p.price.toLocaleString("he-IL")}
              </p>
              <p class="admin-property-location">
                {p.location.city}, {p.location.street} {p.location.number}
              </p>
              <p class="admin-property-status">
                {i18next.t("admin.status")}: {p.is_active ? i18next.t("admin.active") : i18next.t("admin.hidden")}
              </p>
            </div>
            <div class="admin-property-actions">
              <a href={`/admin/edit/${p.id}`} class="admin-edit-btn">
                ✏️ {i18next.t("admin.edit")}
              </a>
              {p.is_active ? (
                <button
                  type="button"
                  class="admin-delete-btn"
                  data-id={p.id}
                  data-activate="false"
                >
                  🗑️ {i18next.t("admin.hide")}
                </button>
              ) : (
                <button
                  type="button"
                  class="admin-restore-btn"
                  data-id={p.id}
                  data-activate="true"
                >
                  ♻️ {i18next.t("admin.restore")}
                </button>
              )}
            </div>
          </div>
        </div>
      ))}
    </main>

    <script type="module">
      // תרגומים זמניים לצד הלקוח
      const translations = {
        propertyRestored: "הנכס שוחזר בהצלחה!",
        propertyHidden: "הנכס הוסתר בהצלחה!",
        connectionError: "❌ שגיאה בחיבור לשרת",
        deleteError: "❌ שגיאה במחיקת נכס",
        restoreError: "❌ שגיאה בשחזור נכס",
        errorFetchingProperties: "שגיאה בטעינת הנכסים",
        status: "סטטוס",
        active: "פעיל",
        hidden: "מוסתר",
        edit: "עריכה",
        hide: "הסתר",
        restore: "שחזור"
      };

      function initDashboard() {
        const session = JSON.parse(sessionStorage.getItem("sb-session") || "{}");

        // בדיקת הרשאות מנהל
        if (!session.access_token) {
          alert("❌ אין הרשאה – אנא התחבר מחדש");
          window.location.href = "/admin/login";
          return;
        }

      // --- המשך טעינת הדף ---
      async function toggleProperty(id, activate) {
        const token = session.access_token;
        if (!token) {
          alert("❌ אין הרשאה – אנא התחבר מחדש");
          window.location.href = "/admin/login";
          return;
        }

        const loadingSpinner = document.getElementById("loading-spinner");
        if (loadingSpinner) loadingSpinner.style.display = "block";

        try {
          const res = await fetch("/api/toggle-property", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ id, activate }),
          });

          const result = await res.json();

          if (loadingSpinner) loadingSpinner.style.display = "none";

          if (result.success) {
            alert(
              activate ? translations.propertyRestored : translations.propertyHidden,
            );

            const propertyCard = document.querySelector(
              `.admin-property-card[data-id='${id}']`,
            );
            if (propertyCard) {
              const statusText = propertyCard.querySelector(
                ".admin-property-status",
              );
              const statusButton = propertyCard.querySelector(
                ".admin-delete-btn, .admin-restore-btn",
              );

              if (statusText)
                statusText.innerText = `${translations.status}: ${activate ? translations.active : translations.hidden}`;

              if (statusButton) {
                statusButton.setAttribute(
                  "data-activate",
                  activate ? "false" : "true",
                );
                if (activate) {
                  statusButton.classList.remove("admin-restore-btn");
                  statusButton.classList.add("admin-delete-btn");
                  statusButton.innerText = `🗑️ ${translations.hide}`;
                } else {
                  statusButton.classList.remove("admin-delete-btn");
                  statusButton.classList.add("admin-restore-btn");
                  statusButton.innerText = `♻️ ${translations.restore}`;
                }
              }
            }
          } else {
            if (result.status === 403) window.location.href = "/admin/login";
            else alert("❌ שגיאה: " + result.message);
          }
        } catch (err) {
          if (loadingSpinner) loadingSpinner.style.display = "none";
          console.error(err);
          alert("❌ שגיאה בחיבור לשרת");
        }
      }

      // יציאה מהמערכת
      document.getElementById("logout-btn").addEventListener("click", () => {
        sessionStorage.removeItem("sb-session");
        window.location.href = "/admin/login";
      });

      // חיבור כפתורים לפונקציה
      document
        .querySelectorAll(".admin-delete-btn, .admin-restore-btn")
        .forEach((button) => {
          button.addEventListener("click", () => {
            const id = button.getAttribute("data-id");
            const activate = button.getAttribute("data-activate") === "true";
            toggleProperty(id, activate);
          });
        });

        // הפעלת הדשבורד
        initDashboard();
      }
    </script>
  </body>
</html>

