---
import fs from "fs";
import path from "path";

const { params } = Astro;
const filePath = path.resolve("./src/data/properties.json");

interface Property {
  id: number;
  title: string;
  price: number;
  location: string;
  description: string;
  images: string[];
}

let properties: Property[] = [];
if (fs.existsSync(filePath)) {
  const fileData = fs.readFileSync(filePath, "utf-8");
  properties = JSON.parse(fileData);
}

const property = properties.find((p: Property) => p.id === Number(params.id));

if (!property) {
  throw new Error(`Property with id ${params.id} not found`);
}
---

<html lang="he">
<head>
  <meta charset="UTF-8" />
  <title>עריכת דירה - {property.title}</title>
  <link rel="stylesheet" href="/styles.css" />
  <style>
    .image-wrapper { position: relative; display: inline-block; margin: 5px; }
    .image-wrapper img { width: 150px; height: auto; display: block; }
    .remove-btn {
      position: absolute;
      top: 2px;
      right: 2px;
      background: red;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      width: 22px;
      height: 22px;
      text-align: center;
      line-height: 18px;
      font-weight: bold;
    }
  </style>
</head>
<body dir="rtl">
  <header>
    <h1>עריכת דירה - {property.title}</h1>
    <a href="/admin/dashboard">⬅️ חזרה לדשבורד</a>
  </header>

  <main>
    <form id="editForm" data-id={property.id}>
      <label>כותרת:</label>
      <input type="text" name="title" value={property.title} required />
      <br />

      <label>מחיר:</label>
      <input type="text" name="price" value={property.price} required />
      <br />

      <label>מיקום:</label>
      <input type="text" name="location" value={property.location} required />
      <br />

      <label>תיאור:</label>
      <textarea name="description" required>{property.description}</textarea>
      <br />

      <label>תמונות קיימות:</label>
      <div id="existingImages" style="display:flex; gap:10px; flex-wrap:wrap;">
        {property.images.map((img, i) => (
          <div class="image-wrapper" data-index={i}>
            <img src={img} alt="תמונה קיימת" />
            <button type="button" class="remove-btn">×</button>
          </div>
        ))}
      </div>
      <br />

      <label>הוסף תמונות חדשות:</label>
      <input type="file" id="imageInput" accept="image/*" multiple />
      <div id="previewContainer" style="display:flex; gap:10px; flex-wrap:wrap; margin-top:10px;"></div>
      <br />

      <button type="submit">שמור שינויים</button>
    </form>

    <p id="message"></p>

    <script type="module">
      const form = document.getElementById("editForm");
      const msg = document.getElementById("message");
      const imageInput = document.getElementById("imageInput");
      const previewContainer = document.getElementById("previewContainer");
      const existingImagesDiv = document.getElementById("existingImages");

      let existingImages = Array.from(existingImagesDiv.querySelectorAll('img')).map(img => img.src);

      // הסרת תמונה קיימת
      existingImagesDiv.addEventListener("click", (e) => {
        if (e.target.classList.contains("remove-btn")) {
          const wrapper = e.target.parentElement;
          const index = Number(wrapper.dataset.index);
          existingImages.splice(index, 1); // הסרת מהמערך
          wrapper.remove();
        }
      });

      // הצגת תצוגה מקדימה לתמונות חדשות
      imageInput.addEventListener("change", () => {
        previewContainer.innerHTML = "";
        Array.from(imageInput.files).forEach(file => {
          const reader = new FileReader();
          reader.onload = e => {
            const img = document.createElement("img");
            img.src = e.target.result;
            img.width = 150;
            previewContainer.appendChild(img);
          };
          reader.readAsDataURL(file);
        });
      });

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const formData = new FormData(form);
        formData.append("id", form.dataset.id);

        // שליחת התמונות הקיימות לאחר הסרה
        existingImages.forEach(src => formData.append("existingImages", src));

        // שליחת תמונות חדשות
        Array.from(imageInput.files).forEach(file => formData.append("images", file));

        try {
          const res = await fetch("/api/edit-property", {
            method: "POST",
            body: formData
          });

          const result = await res.json();
          if (result.success) {
            msg.textContent = "✅ הדירה עודכנה בהצלחה!";
            msg.style.color = "green";

            // עדכון תצוגה מקדימה של כל התמונות
            existingImagesDiv.innerHTML = "";
            previewContainer.innerHTML = "";
            result.images.forEach(src => {
              const wrapper = document.createElement("div");
              wrapper.className = "image-wrapper";
              const img = document.createElement("img");
              img.src = src;
              const btn = document.createElement("button");
              btn.type = "button";
              btn.className = "remove-btn";
              btn.textContent = "×";
              wrapper.appendChild(img);
              wrapper.appendChild(btn);
              existingImagesDiv.appendChild(wrapper);
            });

            existingImages = [...result.images];

          } else {
            msg.textContent = "❌ שגיאה בעדכון הדירה";
            msg.style.color = "red";
          }
        } catch (err) {
          console.error(err);
          msg.textContent = "❌ שגיאה בחיבור לשרת";
          msg.style.color = "red";
        }
      });
    </script>
  </main>
</body>
</html>
