---
import { supabase } from "../../../lib/supabaseClient";
import type { Property } from "../../../types/property";

import i18next from "../../../i18n.js";
const { params } = Astro;
const id: string = params.id as string;

async function getProperty(id: string) {
  const { data, error } = await supabase
    .from("properties")
    .select("*")
    .eq("id", id)
    .single();

  if (error || !data) return null;
  return data as Property;
}

const property = await getProperty(id);
if (!property) throw new Error(`Property with id ${id} not found`);

const location = property.location || {};
---

<html lang="he">
<head>
  <meta charset="UTF-8" />
  <title>{i18next.t("admin.editProperty", { propertyTitle: property.title })}</title>
  <link rel="stylesheet" href="/styles.css" />
</head>
<body dir="rtl">
  <header class="edit-property-header">
    <h1>{i18next.t("admin.editProperty", { propertyTitle: property.title })}</h1>
    <a href="/admin/dashboard" class="edit-property-back">‚¨ÖÔ∏è {i18next.t("admin.backToDashboard")}</a>
    <button id="logout-btn">üö™ {i18next.t("admin.logout")}</button>
  </header>

  <main class="edit-property-main">
    <form id="editForm" class="edit-property-form" data-id={property.id}>
      <!-- ◊õ◊ï◊™◊®◊™ ◊ï◊û◊ó◊ô◊® -->
      <label>{i18next.t("admin.title")}</label>
      <input type="text" name="title" value={property.title} required />
      
      <label>{i18next.t("admin.price")}</label>
      <input type="number" name="price" value={property.price} required />

      <!-- ◊û◊ô◊ß◊ï◊ù -->
      <label>{i18next.t("admin.city")}</label>
      <input type="text" name="city" value={location.city || ""} required/>
      <label>{i18next.t("admin.street")}</label>
      <input type="text" name="street" value={location.street || ""} />
      <label>{i18next.t("admin.number")}</label>
      <input type="text" name="number" value={location.number || ""} />
      <label>{i18next.t("admin.floor")}</label>
      <input type="text" name="floor" value={location.floor || ""} />

      <!-- ◊™◊ô◊ê◊ï◊® -->
      <label>{i18next.t("admin.description")}</label>
      <textarea name="description">{property.description || ""}</textarea>

      <!-- ◊™◊û◊ï◊†◊ï◊™ ◊ß◊ô◊ô◊û◊ï◊™ -->
      <label>{i18next.t("admin.existingImages")}</label>
      <div id="existingImages">
        {property.images.map((img, i) => (
          <div class="edit-property-image-wrapper" data-index={i}>
            <img src={img} alt="{i18next.t('admin.existingImage')}" />
            <button type="button" class="edit-property-remove-btn">√ó</button>
          </div>
        ))}
      </div>

      <!-- ◊î◊¢◊ú◊ê◊™ ◊™◊û◊ï◊†◊ï◊™ ◊ó◊ì◊©◊ï◊™ -->
      <label>{i18next.t("admin.addNewImages")}</label>
      <input type="file" id="imageInput" multiple accept="image/*" />
      <div id="previewContainer"></div>

      <!-- ◊§◊®◊ò◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù -->
      <label>{i18next.t("admin.numberOfRooms")}</label>
      <input type="number" name="bedrooms" value={property.bedrooms || ""} />
      <label>{i18next.t("admin.numberOfBeds")}</label>
      <input type="number" name="beds" value={property.beds || ""} />
      <label>{i18next.t("admin.numberOfBathrooms")}</label>
      <input type="number" name="bathrooms" value={property.bathrooms || ""} />
      <label>{i18next.t("admin.propertyType")}</label>
      <input type="text" name="type" value={property.type || ""} />

      <!-- ◊û◊™◊ß◊†◊ô◊ù -->
      <label>{i18next.t("admin.kitchen")}</label>
      <input type="checkbox" name="kitchen" checked={property.kitchen || false} />
      <label>{i18next.t("admin.washingMachine")}</label>
      <input type="checkbox" name="washingMachine" checked={property.washingMachine || false} />
      <label>{i18next.t("admin.wifi")}</label>
      <input type="checkbox" name="wifi" checked={property.wifi || false} />
      <label>{i18next.t("admin.tv")}</label>
      <input type="checkbox" name="tv" checked={property.tv || false} />
      <label>{i18next.t("admin.publicTransportNearby")}</label>
      <input type="checkbox" name="publicTransportNearby" checked={property.publicTransportNearby || false} />
      <label>{i18next.t("admin.parking")}</label>
      <input type="checkbox" name="parking" checked={property.parking || false} />

      <!-- ◊§◊®◊ò◊ô ◊ô◊¶◊ô◊®◊™ ◊ß◊©◊® -->
      <label>{i18next.t("admin.phone")}</label>
      <input type="text" name="phone" value={property.phone || ""} />
      <label>{i18next.t("admin.whatsapp")}</label>
      <input type="text" name="whatsapp" value={property.whatsapp || ""} />

      <!-- ◊™◊†◊ê◊ô◊ù -->
      <label>{i18next.t("admin.checkInTime")}</label>
      <input type="time" name="checkInTime" value={property.checkInTime || ""} />
      <label>{i18next.t("admin.checkOutTime")}</label>
      <input type="time" name="checkOutTime" value={property.checkOutTime || ""} />
      <label>{i18next.t("admin.minStayDays")}</label>
      <input type="number" name="minStayDays" value={property.minStayDays || ""} />

      <!-- ◊ß◊ò◊í◊ï◊®◊ô◊ï◊™ -->
      <fieldset>
        <legend>üéØ {i18next.t("admin.suitableFor")}</legend>
        <label><input type="checkbox" name="suitable_for" value="◊û◊©◊§◊ó◊ï◊™" checked={property.suitable_for?.includes('◊û◊©◊§◊ó◊ï◊™') || false} /> {i18next.t("admin.families")}</label>
        <label><input type="checkbox" name="suitable_for" value="◊ì◊™◊ô◊ô◊ù" checked={property.suitable_for?.includes('◊ì◊™◊ô◊ô◊ù') || false} /> {i18next.t("admin.religious")}</label>
        <label><input type="checkbox" name="suitable_for" value="◊ß◊ë◊ï◊¶◊ï◊™" checked={property.suitable_for?.includes('◊ß◊ë◊ï◊¶◊ï◊™') || false} /> {i18next.t("admin.groups")}</label>
        <label><input type="checkbox" name="suitable_for" value="◊ñ◊ï◊í◊ï◊™" checked={property.suitable_for?.includes('◊ñ◊ï◊í◊ï◊™') || false} /> {i18next.t("admin.couples")}</label>
      </fieldset>

      <fieldset>
        <legend>üìç {i18next.t("admin.nearby")}</legend>
        <label><input type="checkbox" name="nearby" value="◊ë◊ô◊™ ◊õ◊†◊°◊™" checked={property.nearby?.includes('◊ë◊ô◊™ ◊õ◊†◊°◊™') || false} /> {i18next.t("admin.synagogue")}</label>
        <label><input type="checkbox" name="nearby" value="◊û◊°◊¢◊ì◊ï◊™" checked={property.nearby?.includes('◊û◊°◊¢◊ì◊ï◊™') || false} /> {i18next.t("admin.restaurants")}</label>
        <label><input type="checkbox" name="nearby" value="◊û◊®◊õ◊ñ ◊ß◊†◊ô◊ï◊™" checked={property.nearby?.includes('◊û◊®◊õ◊ñ ◊ß◊†◊ô◊ï◊™') || false} /> {i18next.t("admin.shoppingCenter")}</label>
        <label><input type="checkbox" name="nearby" value="◊™◊ó◊ë◊ï◊®◊î ◊¶◊ô◊ë◊ï◊®◊ô◊™" checked={property.nearby?.includes('◊™◊ó◊ë◊ï◊®◊î ◊¶◊ô◊ë◊ï◊®◊ô◊™') || false} /> {i18next.t("admin.publicTransport")}</label>
      </fieldset>

      <button type="submit">{i18next.t("admin.saveChanges")}</button>
    </form>

    <p id="message"></p>
  </main>

  <script type="module">
    const form = document.getElementById("editForm");
    const msg = document.getElementById("message");
    const imageInput = document.getElementById("imageInput");
    const previewContainer = document.getElementById("previewContainer");
    const existingImagesDiv = document.getElementById("existingImages");
    const logoutBtn = document.getElementById("logout-btn");

    // ◊õ◊§◊™◊ï◊® ◊ô◊¶◊ô◊ê◊î
    logoutBtn.addEventListener("click", () => {
      sessionStorage.removeItem("sb-session");
      window.location.href = "/admin/login";
    });

    // ◊û◊¢◊®◊ö ◊î◊™◊û◊ï◊†◊ï◊™ ◊î◊ß◊ô◊ô◊û◊ï◊™
    let existingImages = Array.from(existingImagesDiv.querySelectorAll("img")).map(img => img.src);

    // ◊î◊°◊®◊™ ◊™◊û◊ï◊†◊î ◊ß◊ô◊ô◊û◊™
    existingImagesDiv.addEventListener("click", (e) => {
      if (e.target.classList.contains("edit-property-remove-btn")) {
        const wrapper = e.target.parentElement;
        const index = Number(wrapper.dataset.index);
        existingImages.splice(index, 1);
        wrapper.remove();
      }
    });

    // ◊î◊¶◊í◊™ ◊™◊¶◊ï◊í◊î ◊û◊ß◊ì◊ô◊û◊î ◊©◊ú ◊™◊û◊ï◊†◊ï◊™ ◊ó◊ì◊©◊ï◊™
    imageInput.addEventListener("change", () => {
      previewContainer.innerHTML = "";
      Array.from(imageInput.files).forEach((file) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const img = document.createElement("img");
          img.src = e.target.result;
          img.width = 150;
          previewContainer.appendChild(img);
        };
        reader.readAsDataURL(file);
      });
    });

    // ◊©◊û◊ô◊®◊™ ◊©◊ô◊†◊ï◊ô◊ô◊ù
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      formData.append("id", form.dataset.id);

      // ◊¶◊®◊£ ◊ê◊™ ◊î◊™◊û◊ï◊†◊ï◊™ ◊î◊ß◊ô◊ô◊û◊ï◊™
      existingImages.forEach(src => formData.append("existingImages", src));

      // ◊î◊ï◊°◊£ ◊ê◊™ ◊î◊™◊û◊ï◊†◊ï◊™ ◊î◊ó◊ì◊©◊ï◊™
      Array.from(imageInput.files).forEach(file => formData.append("images", file));

      try {
        const session = sessionStorage.getItem("sb-session");
        if (!session) {
          msg.textContent = "‚ùå ◊ê◊ô◊ü ◊î◊®◊©◊ê◊î ‚Äì ◊ê◊†◊ê ◊î◊™◊ó◊ë◊® ◊û◊ó◊ì◊©";
          msg.style.color = "red";
          return;
        }

        const token = JSON.parse(session).access_token;

        const res = await fetch("/api/edit-property", {
          method: "POST",
          headers: { Authorization: `Bearer ${token}` },
          body: formData,
        });

        const result = await res.json();

        if (result.success) {
          msg.textContent = "‚úÖ ◊î◊ì◊ô◊®◊î ◊¢◊ï◊ì◊õ◊†◊î ◊ë◊î◊¶◊ú◊ó◊î!";
          msg.style.color = "green";

          // ◊¢◊ì◊õ◊ï◊ü ◊™◊û◊ï◊†◊ï◊™ ◊ß◊ô◊ô◊û◊ï◊™ ◊ê◊ó◊®◊ô ◊¢◊®◊ô◊õ◊î
          existingImagesDiv.innerHTML = "";
          previewContainer.innerHTML = "";
          result.images.forEach((src, i) => {
            const wrapper = document.createElement("div");
            wrapper.className = "edit-property-image-wrapper";
            wrapper.dataset.index = i;
            const img = document.createElement("img");
            img.src = src;
            const btn = document.createElement("button");
            btn.type = "button";
            btn.className = "edit-property-remove-btn";
            btn.textContent = "√ó";
            wrapper.appendChild(img);
            wrapper.appendChild(btn);
            existingImagesDiv.appendChild(wrapper);
          });
          existingImages = [...result.images];
        } else {
          msg.textContent = `‚ùå ◊©◊í◊ô◊ê◊î: ${result.message}`;
          msg.style.color = "red";
        }
      } catch (err) {
        console.error(err);
        msg.textContent = "‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊ó◊ô◊ë◊ï◊® ◊ú◊©◊®◊™";
        msg.style.color = "red";
      }
    });
  </script>
</body>
</html>
