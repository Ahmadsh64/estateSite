---
import { supabase } from "../../../lib/supabaseClient";
import type { Property } from "../../../types/property";
import i18next from "../../../i18n.js";

// בדיקת הרשאות תתבצע בצד הלקוח

const { params } = Astro;
const id: string = params.id as string;

async function getProperty(id: string) {
  const { data, error } = await supabase
    .from("properties")
    .select("*")
    .eq("id", id)
    .single();

  if (error || !data) return null;
  return data as Property;
}

const property = await getProperty(id);
if (!property) throw new Error(`Property with id ${id} not found`);

const location = property.location || {};
---

<html lang="he">
<head>
  <meta charset="UTF-8" />
  <title>{i18next.t("admin.editProperty", { propertyTitle: property.title })}</title>
  <link rel="stylesheet" href="/styles.css" />
</head>
<body dir="rtl">
  <header class="edit-property-header">
    <h1>{i18next.t("admin.editProperty", { propertyTitle: property.title })}</h1>
    <a href="/admin/dashboard" class="edit-property-back">⬅️ {i18next.t("admin.backToDashboard")}</a>
    <button id="logout-btn">🚪 {i18next.t("admin.logout")}</button>
  </header>

  <main class="edit-property-main">
    <form id="editForm" class="edit-property-form" data-id={property.id}>
      <!-- כותרת ומחיר -->
      <label>{i18next.t("admin.title")}</label>
      <input type="text" name="title" value={property.title} required />
      
      <label>{i18next.t("admin.price")}</label>
      <input type="number" name="price" value={property.price} required />

      <!-- מיקום -->
      <label>{i18next.t("admin.city")}</label>
      <input type="text" name="city" value={location.city || ""} required/>
      <label>{i18next.t("admin.street")}</label>
      <input type="text" name="street" value={location.street || ""} />
      <label>{i18next.t("admin.number")}</label>
      <input type="text" name="number" value={location.number || ""} />
      <label>{i18next.t("admin.floor")}</label>
      <input type="text" name="floor" value={location.floor || ""} />

      <!-- תיאור -->
      <label>{i18next.t("admin.description")}</label>
      <textarea name="description">{property.description || ""}</textarea>

      <!-- תמונות קיימות -->
      <label>{i18next.t("admin.existingImages")}</label>
      <p style="color: #666; font-size: 14px; margin: 5px 0 10px 0;">
        לחץ על × כדי להסיר תמונות קיימות
      </p>
      <div id="existingImages">
        {property.images.map((img, i) => (
          <div class="edit-property-image-wrapper" data-index={i}>
            <img src={img} alt="{i18next.t('admin.existingImage')}" />
            <button type="button" class="edit-property-remove-btn">×</button>
          </div>
        ))}
      </div>

      <!-- העלאת תמונות חדשות -->
      <label>{i18next.t("admin.addNewImages")}</label>
      <p style="color: #666; font-size: 14px; margin: 5px 0 10px 0;">
        בחר תמונות חדשות להוספה (ניתן להסיר לפני השמירה)
      </p>
      <input type="file" id="imageInput" multiple accept="image/*" />
      <div id="previewContainer"></div>

      <!-- פרטים נוספים -->
      <label>{i18next.t("admin.numberOfRooms")}</label>
      <input type="number" name="bedrooms" value={property.bedrooms || ""} />
      <label>{i18next.t("admin.numberOfBeds")}</label>
      <input type="number" name="beds" value={property.beds || ""} />
      <label>{i18next.t("admin.numberOfBathrooms")}</label>
      <input type="number" name="bathrooms" value={property.bathrooms || ""} />
      <label>{i18next.t("admin.propertyType")}</label>
      <input type="text" name="type" value={property.type || ""} />

      <!-- מתקנים -->
      <label>{i18next.t("admin.kitchen")}</label>
      <input type="checkbox" name="kitchen" checked={property.kitchen || false} />
      <label>{i18next.t("admin.washingMachine")}</label>
      <input type="checkbox" name="washingMachine" checked={property.washingMachine || false} />
      <label>{i18next.t("admin.wifi")}</label>
      <input type="checkbox" name="wifi" checked={property.wifi || false} />
      <label>{i18next.t("admin.tv")}</label>
      <input type="checkbox" name="tv" checked={property.tv || false} />
      <label>{i18next.t("admin.publicTransportNearby")}</label>
      <input type="checkbox" name="publicTransportNearby" checked={property.publicTransportNearby || false} />
      <label>{i18next.t("admin.parking")}</label>
      <input type="checkbox" name="parking" checked={property.parking || false} />

      <!-- פרטי יצירת קשר -->
      <label>{i18next.t("admin.phone")}</label>
      <input type="tel" name="phone" value={property.phone || ""} pattern="0[0-9]{8,9}" title={i18next.t("property.phoneValidation")} />
      <label>{i18next.t("admin.whatsapp")}</label>
      <input type="tel" name="whatsapp" value={property.whatsapp || ""} pattern="0[0-9]{8,9}" title={i18next.t("property.whatsappValidation")} />

      <!-- תנאים -->
      <label>{i18next.t("admin.checkInTime")}</label>
      <input type="time" name="checkInTime" value={property.checkInTime || ""} />
      <label>{i18next.t("admin.checkOutTime")}</label>
      <input type="time" name="checkOutTime" value={property.checkOutTime || ""} />
      <label>{i18next.t("admin.minStayDays")}</label>
      <input type="number" name="minStayDays" value={property.minStayDays || ""} />

      <!-- קטגוריות -->
      <fieldset>
        <legend>🎯 {i18next.t("admin.suitableFor")}</legend>
        <label><input type="checkbox" name="suitable_for" value={i18next.t("admin.families")} checked={property.suitable_for?.includes(i18next.t("admin.families")) || false} /> {i18next.t("admin.families")}</label>
        <label><input type="checkbox" name="suitable_for" value={i18next.t("admin.religious")} checked={property.suitable_for?.includes(i18next.t("admin.religious")) || false} /> {i18next.t("admin.religious")}</label>
        <label><input type="checkbox" name="suitable_for" value={i18next.t("admin.groups")} checked={property.suitable_for?.includes(i18next.t("admin.groups")) || false} /> {i18next.t("admin.groups")}</label>
        <label><input type="checkbox" name="suitable_for" value={i18next.t("admin.couples")} checked={property.suitable_for?.includes(i18next.t("admin.couples")) || false} /> {i18next.t("admin.couples")}</label>
      </fieldset>

      <fieldset>
        <legend>📍 {i18next.t("admin.nearby")}</legend>
        <label><input type="checkbox" name="nearby" value={i18next.t("admin.synagogue")} checked={property.nearby?.includes(i18next.t("admin.synagogue")) || false} /> {i18next.t("admin.synagogue")}</label>
        <label><input type="checkbox" name="nearby" value={i18next.t("admin.restaurants")} checked={property.nearby?.includes(i18next.t("admin.restaurants")) || false} /> {i18next.t("admin.restaurants")}</label>
        <label><input type="checkbox" name="nearby" value={i18next.t("admin.shoppingCenter")} checked={property.nearby?.includes(i18next.t("admin.shoppingCenter")) || false} /> {i18next.t("admin.shoppingCenter")}</label>
        <label><input type="checkbox" name="nearby" value={i18next.t("admin.publicTransport")} checked={property.nearby?.includes(i18next.t("admin.publicTransport")) || false} /> {i18next.t("admin.publicTransport")}</label>
      </fieldset>

      <button type="submit">{i18next.t("admin.saveChanges")}</button>
    </form>

    <p id="message"></p>
  </main>

  <script type="module">
    // בדיקת הרשאות מנהל
    const session = JSON.parse(sessionStorage.getItem("sb-session") || "{}");
    if (!session.access_token) {
      alert(i18next.t("admin.noPermission"));
      window.location.href = "/admin/login";
    }

    // תרגומים זמניים לצד הלקוח
    const translations = {
      noPermission: "❌ אין הרשאה – אנא התחבר מחדש",
      propertyUpdated: "✅ הדירה עודכנה בהצלחה!",
      connectionError: "❌ שגיאה בחיבור לשרת",
      fillAllFields: "אנא מלא את כל השדות",
      invalidPhone: "מספר טלפון לא תקין",
      invalidWhatsApp: "מספר WhatsApp לא תקין"
    };

    const form = document.getElementById("editForm");
    const msg = document.getElementById("message");
    const imageInput = document.getElementById("imageInput");
    const previewContainer = document.getElementById("previewContainer");
    const existingImagesDiv = document.getElementById("existingImages");
    const logoutBtn = document.getElementById("logout-btn");

    // כפתור יציאה
    logoutBtn.addEventListener("click", () => {
      sessionStorage.removeItem("sb-session");
      window.location.href = "/admin/login";
    });

    // מערך התמונות הקיימות
    let existingImages = Array.from(existingImagesDiv.querySelectorAll("img")).map(img => img.src);

    // פונקציה לעדכון אינדקסים
    function updateImageIndexes() {
      const wrappers = existingImagesDiv.querySelectorAll(".edit-property-image-wrapper");
      wrappers.forEach((wrapper, index) => {
        wrapper.dataset.index = index;
      });
    }

    // הסרת תמונה קיימת
    existingImagesDiv.addEventListener("click", (e) => {
      if (e.target.classList.contains("edit-property-remove-btn")) {
        const wrapper = e.target.parentElement;
        const index = Number(wrapper.dataset.index);
        existingImages.splice(index, 1);
        wrapper.remove();
        updateImageIndexes();
      }
    });

    // מערך התמונות החדשות
    let newImages = [];

    // הצגת תצוגה מקדימה של תמונות חדשות
    imageInput.addEventListener("change", () => {
      previewContainer.innerHTML = "";
      newImages = [];
      
      Array.from(imageInput.files).forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const wrapper = document.createElement("div");
          wrapper.className = "edit-property-image-wrapper";
          wrapper.dataset.newIndex = index;
          
          const img = document.createElement("img");
          img.src = e.target.result;
          img.width = 150;
          img.height = 150;
          img.style.borderRadius = "8px";
          
          const removeBtn = document.createElement("button");
          removeBtn.type = "button";
          removeBtn.className = "edit-property-remove-btn";
          removeBtn.textContent = "×";
          removeBtn.dataset.newIndex = index;
          
          wrapper.appendChild(img);
          wrapper.appendChild(removeBtn);
          previewContainer.appendChild(wrapper);
          
          newImages.push(file);
        };
        reader.readAsDataURL(file);
      });
    });

    // הסרת תמונה חדשה מתצוגה מקדימה
    previewContainer.addEventListener("click", (e) => {
      if (e.target.classList.contains("edit-property-remove-btn")) {
        const wrapper = e.target.parentElement;
        const index = Number(e.target.dataset.newIndex);
        
        // הסר מהמערך
        newImages.splice(index, 1);
        wrapper.remove();
        
        // עדכן את ה-input
        const dt = new DataTransfer();
        newImages.forEach(file => dt.items.add(file));
        imageInput.files = dt.files;
        
        // עדכן אינדקסים
        const remainingWrappers = previewContainer.querySelectorAll(".edit-property-image-wrapper");
        remainingWrappers.forEach((wrapper, newIndex) => {
          wrapper.dataset.newIndex = newIndex;
          wrapper.querySelector(".edit-property-remove-btn").dataset.newIndex = newIndex;
        });
      }
    });

    // שמירת שינויים
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      formData.append("id", form.dataset.id);

      // צרף את התמונות הקיימות
      existingImages.forEach(src => formData.append("existingImages", src));

      // הוסף את התמונות החדשות
      newImages.forEach(file => formData.append("images", file));

      try {
        const session = sessionStorage.getItem("sb-session");
        if (!session) {
          msg.textContent = translations.noPermission;
          msg.style.color = "red";
          return;
        }

        const token = JSON.parse(session).access_token;

        const res = await fetch("/api/edit-property", {
          method: "POST",
          headers: { Authorization: `Bearer ${token}` },
          body: formData,
        });

        const result = await res.json();

        if (result.success) {
          msg.textContent = `${translations.propertyUpdated} (${result.images.length} תמונות)`;
          msg.style.color = "green";

          // עדכון תמונות קיימות אחרי עריכה
          existingImagesDiv.innerHTML = "";
          previewContainer.innerHTML = "";
          result.images.forEach((src, i) => {
            const wrapper = document.createElement("div");
            wrapper.className = "edit-property-image-wrapper";
            wrapper.dataset.index = i;
            const img = document.createElement("img");
            img.src = src;
            img.style.width = "150px";
            img.style.height = "150px";
            img.style.borderRadius = "8px";
            img.style.objectFit = "cover";
            img.style.border = "2px solid #e0e0e0";
            const btn = document.createElement("button");
            btn.type = "button";
            btn.className = "edit-property-remove-btn";
            btn.textContent = "×";
            wrapper.appendChild(img);
            wrapper.appendChild(btn);
            existingImagesDiv.appendChild(wrapper);
          });
          existingImages = [...result.images];
          newImages = [];
        } else {
          msg.textContent = `❌ שגיאה: ${result.message}`;
          msg.style.color = "red";
        }
      } catch (err) {
        console.error(err);
        msg.textContent = translations.connectionError;
        msg.style.color = "red";
      }
    });
  </script>
</body>
</html>
